package astar;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class AStar {

    public String mMetadataFilePath;
    public Spot[][] mGrid;
    public final int GRID_SIZE = 25;
    public final int RATIO = 11;

    public void linkHorizontalNeighbors() {
        for (int i = 0; i < mGrid.length; i++) {
            for (int j = 0; j < (mGrid[i].length) - 1; j++) {
                if (i > 0) {
                    mGrid[i][j].addNeighbor(mGrid[i - 1][j]);
                }
                if (j > 0) {
                    mGrid[i][j].addNeighbor(mGrid[i][j - 1]);
                }
                if (i < mGrid.length - 1) {
                    mGrid[i][j].addNeighbor(mGrid[i + 1][j]);
                }
                if (j < mGrid.length - 1) {
                    mGrid[i][j].addNeighbor(mGrid[i][j + 1]);
                }
                if (i > 0 && j > 0) {
                    mGrid[i][j].addNeighbor(mGrid[i - 1][j - 1]);
                }
                if (i < mGrid.length - 1 && j < mGrid.length - 1) {
                    mGrid[i][j].addNeighbor(mGrid[i + 1][j + 1]);
                }
            }
        }
    }

    public Edges pointsToArea(JSONObject coords) {
        // The min max default values are set
        // respectively to the 25x25 array size
        // generated by the metadata tool
        int minX = GRID_SIZE;
        int minY = GRID_SIZE;
        int maxX = 0;
        int maxY = 0;

        for (int i = 0; i < coords.size(); i++) {

            JSONObject xy = (JSONObject) coords.get(String.valueOf(i));

            int x = Math.toIntExact((long) xy.get("x"));
            int y = Math.toIntExact((long) xy.get("y"));

            if (x < minX) {
                minX = x;
            }
            if (x > maxX) {
                maxX = x;
            }
            if (y < minY) {
                minY = y;
            }
            if (y > maxY) {
                maxY = y;
            }
        }

        return new Edges(minX, maxX, minY, maxY, RATIO);
    }

    public Edges[] getDictFromJSON(Destination start, Destination end, InputStreamReader in) {

        JSONParser parser = new JSONParser();

        //filePath is assumed to have a path to JSON
        //think about exception handling

        JSONObject json = null;
        try {
            json = (JSONObject) parser.parse(in);

        } catch (ParseException | IOException e) {
            e.printStackTrace();
        }

        JSONObject startCoords = getDict(start, json);
        JSONObject endCoords = getDict(end, json);

        Edges startDict = pointsToArea(startCoords);
        Edges endDict = pointsToArea(endCoords);

        Edges[] startEnd = {startDict, endDict};

        return startEnd;
    }

    public JSONObject getDict(Destination destination, JSONObject json) {
        json = (JSONObject) json.get(destination.mBuilding);
        json = (JSONObject) json.get(destination.mFloor);
        json = (JSONObject) json.get(destination.mRoom);

        return json;
    }

    public Destination setDestFromString(String dest) {
        // Assuming string has the following format %s-%d%d%d
        // or %s-%s%d.%d%d%d. The regex operation is able to
        // extract the information needed to instantiate the
        // Destination object.

        String roomRegex = "(\\S{1,2})\\s((\\w?\\d\\.|\\w)?(\\d{3,4}))";

        Pattern roomPattern = Pattern.compile(roomRegex);
        Matcher m = roomPattern.matcher(dest);

        Destination destination = new Destination();

        if (m.matches()) {
            destination.setmBuilding(m.group(1));
            destination.setmRoom(m.group(0));
            destination.setmFloor(m.group(2).substring(0, 1));
        } else {
            // handle exception
        }


        return destination;
    }


    public void initializeSpotGrid(boolean[][] bool) {
        mGrid = new Spot[bool.length][bool[bool.length - 1].length];

        for (int i = 0; i < mGrid.length; i++) {
            for (int j = 0; j < mGrid[i].length; j++) {
                mGrid[i][j] = new Spot(i, j, bool[i][j]);
            }
        }
    }

    public void initializeSpotArea(Edges point) {
        for (int i = 0; i < mGrid.length; i++) {
            for (int j = 0; j < mGrid[i].length; j++) {
                if (i <= point.getRight()
                        && i >= point.getLeft()
                        && j <= point.getTop()
                        && j >= point.getBottom()) {
                    mGrid[i][j].setWall(false);
                }
            }
        }
    }

    public void createSpotGrid(boolean[][] bool, Edges[] startEnd) {

        mGrid = new Spot[bool.length][bool[bool.length - 1].length];

        for (int i = 0; i < mGrid.length; i++) {
            for (int j = 0; j < mGrid[i].length; j++) {
                if (i <= startEnd[0].getRight()
                        && i >= startEnd[0].getLeft()
                        && j <= startEnd[0].getTop()
                        && j >= startEnd[0].getBottom()) {

                    mGrid[i][j] = new Spot(i, j, false);

                } else if (i <= startEnd[1].getRight()
                        && i >= startEnd[1].getLeft()
                        && j <= startEnd[1].getTop()
                        && j >= startEnd[1].getBottom()) {

                    mGrid[i][j] = new Spot(i, j, false);

                } else {

                    mGrid[i][j] = new Spot(i, j, bool[i][j]);

                }
            }
        }
    }

    public Spot runAlgorithm(int x1, int y1, int x2, int y2) {

        List<Spot> openSet = new ArrayList<>();
        List<Spot> closedSet = new ArrayList<>();

        Spot start = mGrid[x1][y1];
        Spot end = mGrid[x2][y2];

        if (start.isWall()) {
            System.err.println("START");
            return new Spot(0, 0, true);
        }
        if (end.isWall()) {
            System.err.println("END");
            return new Spot(1, 1, true);
        }

        start.setH(getDistance(start, end));
        start.updateF();

        openSet.add(start);

        Spot current;
        Spot path = null;

        while (openSet.size() > 0) {

            //check the node in the openSet with lowest F score
            current = openSet.get(0);

            for (Spot candidate : openSet) {
                if (candidate.getF() == current.getF()) {
                    if (candidate.getG() < current.getG()) {
                        current = candidate;
                    }
                }
                if (candidate.getF() < current.getF()) {
                    current = candidate;
                }
            }

            openSet.remove(current);
            closedSet.add(current);

            for (Spot neighbor : current.getNeighbors()) {
                if (!closedSet.contains(neighbor) && !neighbor.isWall()) {

                    double tent_score = current.getG() + getDistance(current, neighbor);

                    if (openSet.contains(neighbor)) {
                        if (tent_score < neighbor.getG()) {

                            neighbor.setG(tent_score);

                        }
                    } else {

                        neighbor.setG(tent_score);
                        openSet.add(neighbor);

                    }

                    neighbor.setPrevious(current);

                    neighbor.setH(getDistance(neighbor, end));
                    neighbor.updateF();

                }

            }

            if (current.equals(end)) {
                path = current;
                break;
            }

        }
        /*
        Returns linked list of nodes (Spot),
        iterate through the nodes by using Spot.getPrevious()
         */
        return path;

    }

    // Chebyshev distance formula
    private double getDistance(Spot a, Spot b) {
        int deltaX = a.getX() - b.getX();
        int deltaY = a.getY() - b.getY();
        return ((Math.max(Math.abs(deltaX), Math.abs(deltaY))));
    }

}
